# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
#   # Orb commands and jobs help you with common scripting around a language/tool
#   # so you dont have to copy and paste it everywhere.
#   # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
#   python: circleci/python@1.5.0

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
#     # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
#     # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
#     # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
#     # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
#     # Change the version below to your required version of python
#     docker:
#       - image: cimg/python:3.10.2
#     # Checkout the code as the first step. This is a dedicated CircleCI step.
#     # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
#     # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
#     # Then run your tests!
#     # CircleCI will report the results back to your VCS provider.
#       - image: circleci/postgres:11 # database image
#         environment: # environment variables for database, it is kind of obvious but it is important that they match with your test config in database.yml
#           POSTGRES_USER: postgres
#           POSTGRES_DB: free_tomorrow_backend_test
#           POSTGRES_PASSWORD: free_tomorrow_backend_test
#     steps:
#       - checkout
#       - python/install-packages:
#           pkg-manager: pip
#           # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
#           # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Run tests
#           # This assumes pytest is installed via the install-package step above
#           command: python manage.py test

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - build-and-test

name: Free Tomorrow Backend

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: free_tomorrow_backend_test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10.2
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django
    - name: Run migrations
      run: python manage.py migrate
    - name: Run tests
      run: py.test
